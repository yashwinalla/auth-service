// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// AccountLockStatusResponse defines model for AccountLockStatusResponse.
type AccountLockStatusResponse struct {
	IsAccountLocked   bool  `json:"isAccountLocked"`
	LoginFailureCount int64 `json:"loginFailureCount"`
}

// DeleteFacebookUserDataResponse defines model for DeleteFacebookUserDataResponse.
type DeleteFacebookUserDataResponse struct {
	Url string `json:"url"`
}

// FacebookUserDataDeletionStatusResponse defines model for FacebookUserDataDeletionStatusResponse.
type FacebookUserDataDeletionStatusResponse struct {
	Message string `json:"message"`
	Status  string `json:"status"`
	UserId  string `json:"userId"`
}

// ForgotPasswordRequest defines model for ForgotPasswordRequest.
type ForgotPasswordRequest struct {
	Email string `json:"email"`
}

// LoginLogsRequest defines model for LoginLogsRequest.
type LoginLogsRequest struct {
	Email string `json:"email"`
}

// ResendPasswordResetLinkRequest defines model for ResendPasswordResetLinkRequest.
type ResendPasswordResetLinkRequest struct {
	Email string `json:"email"`
}

// Response defines model for Response.
type Response struct {
	Code       *int        `json:"code,omitempty"`
	Data       interface{} `json:"data"`
	Error      bool        `json:"error"`
	Message    string      `json:"message"`
	Status     int         `json:"status"`
	TotalCount *int        `json:"totalCount,omitempty"`
}

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest struct {
	Email string `json:"email"`
	Tnc   bool   `json:"tnc"`
}

// SocialSignUpRequest defines model for SocialSignUpRequest.
type SocialSignUpRequest struct {
	Email          string `json:"email"`
	FirebaseUserID string `json:"firebaseUserID"`
	Tnc            bool   `json:"tnc"`
}

// CheckAccountLockStatusParams defines parameters for CheckAccountLockStatus.
type CheckAccountLockStatusParams struct {
	Email string `form:"email" json:"email"`
}

// DeleteFacebookUserDataFormdataBody defines parameters for DeleteFacebookUserData.
type DeleteFacebookUserDataFormdataBody struct {
}

// GetFacebookUserDataDeletionStatusParams defines parameters for GetFacebookUserDataDeletionStatus.
type GetFacebookUserDataDeletionStatusParams struct {
	UserId string `form:"userId" json:"userId"`
}

// ResetPasswordSubmitParams defines parameters for ResetPasswordSubmit.
type ResetPasswordSubmitParams struct {
	// Token The password reset token
	Token string `form:"token" json:"token"`
}

// UnlockAccountParams defines parameters for UnlockAccount.
type UnlockAccountParams struct {
	Email string `form:"email" json:"email"`
}

// ValidatePasswordResetTokenParams defines parameters for ValidatePasswordResetToken.
type ValidatePasswordResetTokenParams struct {
	// Token The password reset token to validate
	Token string `form:"token" json:"token"`
}

// DeleteFacebookUserDataFormdataRequestBody defines body for DeleteFacebookUserData for application/x-www-form-urlencoded ContentType.
type DeleteFacebookUserDataFormdataRequestBody DeleteFacebookUserDataFormdataBody

// ForgotPasswordJSONRequestBody defines body for ForgotPassword for application/json ContentType.
type ForgotPasswordJSONRequestBody = ForgotPasswordRequest

// LogUserLoginJSONRequestBody defines body for LogUserLogin for application/json ContentType.
type LogUserLoginJSONRequestBody = LoginLogsRequest

// ResendPasswordResetLinkJSONRequestBody defines body for ResendPasswordResetLink for application/json ContentType.
type ResendPasswordResetLinkJSONRequestBody = ResendPasswordResetLinkRequest

// SignUpJSONRequestBody defines body for SignUp for application/json ContentType.
type SignUpJSONRequestBody = SignUpRequest

// SocialSignUpJSONRequestBody defines body for SocialSignUp for application/json ContentType.
type SocialSignUpJSONRequestBody = SocialSignUpRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /service/api/auth/v1/account-lock-status)
	CheckAccountLockStatus(c *gin.Context, params CheckAccountLockStatusParams)

	// (POST /service/api/auth/v1/facebook/delete-user-data)
	DeleteFacebookUserData(c *gin.Context)

	// (GET /service/api/auth/v1/facebook/user-data-deletion-status)
	GetFacebookUserDataDeletionStatus(c *gin.Context, params GetFacebookUserDataDeletionStatusParams)

	// (POST /service/api/auth/v1/forgot-password)
	ForgotPassword(c *gin.Context)

	// (POST /service/api/auth/v1/login-logs)
	LogUserLogin(c *gin.Context)

	// (POST /service/api/auth/v1/resend-password-reset-link)
	ResendPasswordResetLink(c *gin.Context)

	// (PUT /service/api/auth/v1/reset-password-submit)
	ResetPasswordSubmit(c *gin.Context, params ResetPasswordSubmitParams)

	// (POST /service/api/auth/v1/sign-up)
	SignUp(c *gin.Context)

	// (POST /service/api/auth/v1/social-sign-up)
	SocialSignUp(c *gin.Context)

	// (PUT /service/api/auth/v1/unlock-account)
	UnlockAccount(c *gin.Context, params UnlockAccountParams)

	// (GET /service/api/auth/v1/validate-password-reset-token)
	ValidatePasswordResetToken(c *gin.Context, params ValidatePasswordResetTokenParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CheckAccountLockStatus operation middleware
func (siw *ServerInterfaceWrapper) CheckAccountLockStatus(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckAccountLockStatusParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckAccountLockStatus(c, params)
}

// DeleteFacebookUserData operation middleware
func (siw *ServerInterfaceWrapper) DeleteFacebookUserData(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFacebookUserData(c)
}

// GetFacebookUserDataDeletionStatus operation middleware
func (siw *ServerInterfaceWrapper) GetFacebookUserDataDeletionStatus(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFacebookUserDataDeletionStatusParams

	// ------------- Required query parameter "userId" -------------

	if paramValue := c.Query("userId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument userId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "userId", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFacebookUserDataDeletionStatus(c, params)
}

// ForgotPassword operation middleware
func (siw *ServerInterfaceWrapper) ForgotPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ForgotPassword(c)
}

// LogUserLogin operation middleware
func (siw *ServerInterfaceWrapper) LogUserLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LogUserLogin(c)
}

// ResendPasswordResetLink operation middleware
func (siw *ServerInterfaceWrapper) ResendPasswordResetLink(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResendPasswordResetLink(c)
}

// ResetPasswordSubmit operation middleware
func (siw *ServerInterfaceWrapper) ResetPasswordSubmit(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ResetPasswordSubmitParams

	// ------------- Required query parameter "token" -------------

	if paramValue := c.Query("token"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument token is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", c.Request.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetPasswordSubmit(c, params)
}

// SignUp operation middleware
func (siw *ServerInterfaceWrapper) SignUp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUp(c)
}

// SocialSignUp operation middleware
func (siw *ServerInterfaceWrapper) SocialSignUp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SocialSignUp(c)
}

// UnlockAccount operation middleware
func (siw *ServerInterfaceWrapper) UnlockAccount(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UnlockAccountParams

	// ------------- Required query parameter "email" -------------

	if paramValue := c.Query("email"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument email is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "email", c.Request.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter email: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UnlockAccount(c, params)
}

// ValidatePasswordResetToken operation middleware
func (siw *ServerInterfaceWrapper) ValidatePasswordResetToken(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ValidatePasswordResetTokenParams

	// ------------- Required query parameter "token" -------------

	if paramValue := c.Query("token"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument token is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", c.Request.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidatePasswordResetToken(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/service/api/auth/v1/account-lock-status", wrapper.CheckAccountLockStatus)
	router.POST(options.BaseURL+"/service/api/auth/v1/facebook/delete-user-data", wrapper.DeleteFacebookUserData)
	router.GET(options.BaseURL+"/service/api/auth/v1/facebook/user-data-deletion-status", wrapper.GetFacebookUserDataDeletionStatus)
	router.POST(options.BaseURL+"/service/api/auth/v1/forgot-password", wrapper.ForgotPassword)
	router.POST(options.BaseURL+"/service/api/auth/v1/login-logs", wrapper.LogUserLogin)
	router.POST(options.BaseURL+"/service/api/auth/v1/resend-password-reset-link", wrapper.ResendPasswordResetLink)
	router.PUT(options.BaseURL+"/service/api/auth/v1/reset-password-submit", wrapper.ResetPasswordSubmit)
	router.POST(options.BaseURL+"/service/api/auth/v1/sign-up", wrapper.SignUp)
	router.POST(options.BaseURL+"/service/api/auth/v1/social-sign-up", wrapper.SocialSignUp)
	router.PUT(options.BaseURL+"/service/api/auth/v1/unlock-account", wrapper.UnlockAccount)
	router.GET(options.BaseURL+"/service/api/auth/v1/validate-password-reset-token", wrapper.ValidatePasswordResetToken)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXTW/jNhP+KwLf9yitsu2iB9+yG6RNYaBBPtrDIgdaGstcSyRDDp0ahv57MZQsf1GR",
	"N60X3s0pskYzw2fmmXm4YpmqtJIg0bLRitlsBhX3/15mmXISxyqb3yNHZ+/AaiUt0EttlAaDArypsFvG",
	"kNNPuNTARmyiVAlcsjpmpSqEvOaidAY+kTGZTZWpOLIRExJ/+cDi9XdCIhRgWF3HzMCzE4bcfj6IFHL7",
	"1HlRky+QIQW/ghIQrnkGE6XmjxbMFUfefyJnyq1TWDRCFgfJkFEo2H4YH1woOQRjBdbyAgKBY2b9t8FX",
	"zoK5yY9It7HrfMVdwOAhlCkU3nJrX5TJ7+DZgcXDnKHi4gioGrNQnDHVb6wKe7oQd2BB5pujWMCxkPOT",
	"Buwpcaby7fp2bR6znCNno1UdMzBGmTCHvqpDtpyjQl52pBvgWNcePqVN0HVmoRPfi0I+6q9GNGYos9BR",
	"g1A31sHwKhO8fHMSU2Fgwi0QYW+u/oM89xz2JU5Vg8wZgct7GrxNnh+BGzCXDmf0NPFP1+s5+ftfD8Rg",
	"b02J+LebuTlD1Kwmx0JOFX2fg82M0DR/2Ihd3t5EU2WiikteCFlE3OEsEjLCGUS/iQVUQuZ5ZJcWoSK3",
	"Akvyu3lFeUWXtzcsZgswtnH7/t3FuwuCSWmQXAs2Yj/7n2KmOc78sVILZiEySLkWKYVNF+9T3kzzpFTZ",
	"PNl0cAG+flQ9TpnTeGOfZpDND7aSD2F4BQjGstHnFROU0bMDs2Qxk9zjtC7MplhoHLRA8hDXn8i4obFP",
	"6aeLi4bAEqGhEde6FJnPL/1iCYfVlj9eln9MfT7/NzBlI/a/dLNq03bPpt2kqOP9dm0Hwquf9+9oaoG9",
	"bnuqm784XIppu7XS3O/KhNZFsk5CKxuoSHirtjCDxY8qX74C2t/Jy8tLQhIgcaYEScOR9ljd0OrcwR/Q",
	"FP+iAh30Sd5KhyFu/Ar4uuo4jiadRPjBeHKkIntDybxKSnSrLfqpsiunjqbIIV6vHjOo2erdLUUF/db8",
	"GkDRa/ikVIXtB3CsCqqel4sngu9Aip4/csZL267/EnrGpBRy3o9kjxw+EagD4vv7gHjD8MS6SSUadel6",
	"wO0YeN/YHozeXU32MINo7T7y0SJUc6AuD83o9bvzHdEDgFpRyMTp/gZtdPyJ+nH3knD+7Wf91SYZBm3r",
	"CnQq6AK3rPMH0El/uWhvGr3EffRmraD+US4VA9AseClyjrC/P5oR06c1/2y/2pnpD+1UetOki1BF61y+",
	"76kXsw/fqKR1/U8AAAD//1bVIIG8FQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
